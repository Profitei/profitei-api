name: Deploy dokku and database

on:
  workflow_dispatch:
  push:
    branches:
      - stage

jobs:
  changed_files:
    runs-on: ubuntu-latest # windows-latest || macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # OR "2" -> To retrieve the preceding commit.

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v43
      # NOTE: `since_last_remote_commit: true` is implied by default and falls back to the previous local commit.

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done
  check-changed-apps:
    runs-on: ubuntu-latest
    outputs:
      changed-files-database: ${{ steps.changed-files-database.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check changes on prisma
        id: changed-files-database
        uses: tj-actions/changed-files@v39
        with:
          since_last_remote_commit: true
          files: |
            prisma/**
            .github/**
  deploy-profitei-stage:
    runs-on: ubuntu-latest
    steps:
      - name: Cloning repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Push to dokku
        uses: dokku/github-action@master
        with:
          branch: 'main'
          git_remote_url: ssh://dokku@apps.profitei.net/profitei-api
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          git_push_flags: '--force'
  execute-database:
    runs-on: ubuntu-latest
    if: needs.check-changed-apps.outputs.changed-files-database == 'true'
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: prisma:deploy
