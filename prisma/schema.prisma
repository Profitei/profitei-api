// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Raffle {
  id         Int          @id @default(autoincrement())
  name       String
  image      String
  price      Float
  tickets    Ticket[]
  properties Properties[]
  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int
  status     Status       @default(AVAILABLE)
  created    DateTime     @default(now()) @map("created_at")
  modified   DateTime?    @updatedAt @map("updated_at")
  isFeatured Boolean      @default(true)
  steamPrice Float        @default(0)
}

model Ticket {
  id       Int       @id @default(autoincrement())
  name     String
  winner   Boolean
  status   Status    @default(AVAILABLE)
  Raffle   Raffle    @relation(fields: [raffleId], references: [id])
  raffleId Int
  user     User?     @relation(fields: [userId], references: [id])
  userId   Int?
  Order    Order?    @relation(fields: [orderId], references: [id])
  orderId  Int?
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model Order {
  id       Int       @id @default(autoincrement())  
  items   Ticket[]
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
  status  OrderStatus @default(PENDING)
  details Json?
}

enum Status {
  AVAILABLE
  AWAITING_DRAW
  DRAWN
  UNAVAILABLE

}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}
model Properties {
  id       Int     @id @default(autoincrement())
  name     String
  value    String
  raffleId Int?
  Raffle   Raffle? @relation(fields: [raffleId], references: [id])
}

model Category {
  id     Int      @id @default(autoincrement())
  name   String
  Raffle Raffle[]
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  cpf       String?
  image    String?
  tradelink String?
  Ticket    Ticket[]
  DeviceToken DeviceToken[]
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model DeviceToken {
  id       Int      @id @default(autoincrement())
  token    String   @unique
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}
